{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>PAROL6 is a high-performance 3D-printed desktop robotic arm. The design approach of PAROL6 was to be similar to industrial robots in terms of mechanical design, control software, and usability. Control software, GUI, and robots STL files are open-source. You can build your own PAROL6 robot by following the instructions located in Github respository.</p> <p>Note</p> <p>Parol6 is stil work in progress and is being constantly updated. Expect this document to change on weekly basis.</p>"},{"location":"#project-links","title":"Project links","text":"<p>For building instructions visit: Link All project files are on Github: Link PAROL commander software on Github: Link For Discord community visit: Link For official forum visit: Link See more of our robots on Youtube, Instagram, Twitter(X)</p>"},{"location":"#documentation-layout","title":"Documentation layout","text":"<pre><code>docs/\n    Home                    # Homepage of the project.\n    About PAROL6            # Robot specifications, limits and.features\n    General concepts        # General robotics concepts and theory.\n    PAROL6 control board    # All about control board and how to use it.\n    Getting started         # How to start using PAROL6 robot.\n    Software                # All about PAROL6 software and API.\n    Peripherals             # All about grippers, pneumatics, PLCs...\n    Safety and handling     # How to not brake your robot.\n</code></pre>"},{"location":"#support-the-project","title":"Support the project!","text":"<p>All the code and STL files needed to build the robot are Open source and free to all and I would like to keep it that way. Any help in terms of donations, advice, or contribution is really appreciated. Thank you!</p> <p></p>"},{"location":"page1/","title":"General concepts","text":"<p>The PAROL6 robotic arm serves as an exceptional tool for educators aiming to enhance their students' understanding of robotics and automation. Its innovative design and user-friendly features make it an ideal platform for various educational settings. In our commitment to fostering a deep understanding of robotics and empowering educators to enhance their curriculums, the PAROL6 documentation includes a dedicated \"Theory Corner.\" This section serves as a valuable resource for individuals seeking to delve into the theoretical foundations of robotics and educators striving to enrich their teaching materials.</p> <p>The Theory Corner is designed to provide comprehensive explanations of essential robotic concepts. Whether you're a newcomer to robotics or a seasoned enthusiast, this section offers insights into topics such as kinematics, dynamics, control systems, sensors, programming languages, and more. </p>"},{"location":"page1/#want-to-know-more","title":"Want to know more?","text":"<p>Here is a listo of great resources that you can use to learn more about robotics:</p> <ul> <li>https://robotacademy.net.au/</li> <li>https://automaticaddison.com/</li> <li>https://robogrok.com/</li> <li>https://github.com/mithi/robotics-coursework</li> </ul>"},{"location":"page1/#basic-theory","title":"Basic theory","text":""},{"location":"page1/#joints-and-naming","title":"Joints and naming","text":"<p>Joint are numbered from bottom to the top of the arm. In case of PAROL6 it follows naming on the Figure 1.</p> <p> </p> <pre><code>                    Figure 1: Robot joint naming\n</code></pre>"},{"location":"page1/#rules-and-convenctions","title":"Rules and convenctions","text":""},{"location":"page1/#right-hand-rule-for-axes","title":"Right hand rule for axes","text":"<p>The right-hand rule is a convention used to define the orientation of coordinate systems in three-dimensional space. It provides a consistent way to determine the positive directions of the axes (x, y, and z) in relation to each other.</p> <p>Here's how the right-hand rule works when assigning coordinate systems:</p> <ul> <li> <p>Thumb: Align your right thumb along the positive direction of the first axis (usually the x-axis). This is the axis that typically points to the right.</p> </li> <li> <p>Index Finger: Extend your right index finger perpendicular to your thumb. This represents the positive direction of the second axis (usually the y-axis), which is often considered the \"up\" direction.</p> </li> <li> <p>Middle Finger: Orient your right middle finger so that it is also perpendicular to your thumb and index finger. The middle finger represents the positive direction of the third axis (usually the z-axis), forming a right-handed coordinate system.</p> </li> </ul> <p>With your hand in this configuration, the three fingers (thumb, index finger, and middle finger) define the positive directions of the x, y, and z axes, respectively. This right-hand rule establishes a consistent standard for defining coordinate systems in three-dimensional space.</p> <p>For rotation; orient your thumb in positive direction of axes you want to see positive rotation for. Your fingers now curl in the positive direction of rotation around that axis.</p>"},{"location":"page1/#concepts","title":"Concepts","text":""},{"location":"page1/#types-of-robots-and-number-of-joints","title":"Types of robots and number of joints","text":"<p>There are a lot of robot types in industry. They are usually categorised by number of joints and how they are arranged. Some of the types of the robots are:</p> <p>\u2022 Vertically articulated. \u2022 Cartesian. \u2022 Cylindrical. \u2022 Polar. \u2022 Selective compliance assembly robot arm (SCARA). \u2022 Delta</p> <p>PAROL6 is vartically articulated robot. All conecpts here apply to any type of the robot but most of the examples will be for robots like PAROL6.</p>"},{"location":"page1/#spherical-wrist","title":"Spherical wrist","text":"<p>The first 3 axes are used to position the end effector in cartesian space while the last 3 joints are used to change the end effector orientation.  PAROL6 uses a popular configuration where the axes of rotation of the last 3 joints intersect. That configuration is called a spherical wrist and is one of the most common configurations you will see in industrial robots.  A spherical wrist allows for much easier and faster calculation of inverse kinematics.  You can see an example of a spherical wrist on the example of Faze4 robotic arm in the image below.</p> <p> </p> <pre><code>                    Figure 2: left robot with spherical wrist, right robot without spherical wrist\n</code></pre>"},{"location":"page1/#robot-pose","title":"Robot pose","text":"<p>In robotics, the term \"pose\" refers to the position and orientation of a robot in its environment. It provides a complete description of where the robot is located and how it is oriented relative to a specific coordinate system or frame of reference. The pose typically includes:</p> <ul> <li> <p>Position: This specifies the location of the robot in the environment. In a 2D space, this is often represented by a pair of coordinates (x, y), while in a 3D space, it includes three coordinates (x, y, z). These coordinates are usually given with respect to a fixed reference point.</p> </li> <li> <p>Orientation: This specifies the orientation or rotation of the robot in space. In 2D, it can be represented as an angle (\u03b8) relative to a reference direction (e.g., the x-axis). In 3D, it often uses representations like Euler angles, roll-pitch-yaw angles, or rotation matrices to describe the orientation.</p> </li> </ul> <p>KAKO MI TU REPRESENTAMO ORIEJNTACIJU </p> <p>The combination of position and orientation fully defines the pose of the robot at a specific moment in time.</p>"},{"location":"page1/#orientation","title":"Orientation","text":"<p>KAKO MI TU REPRESENTAMO ORIEJNTACIJU </p> <p>6 axes means it has 6 joints in our case 6 rotational joints. Joints are connected with links.  The advantage of robot arms of this type is that they can get to the same position in space with different orientations.  Both pictures show the arm at position x=0.3m, y=0.3m, and z=0.2m but as you can see orientations are different. Robot's pose in 3D space is described by the position and orientation ( rotation) of the robot's end effector in 3D space.</p> <p> </p> <pre><code>                    Figure 3: Same position in space different orientation\n</code></pre>"},{"location":"page1/#positon","title":"Positon","text":""},{"location":"page1/#frames","title":"Frames","text":"<p>Coordinate frames or axes are often included at each joint to show the orientation and position of each joint relative to a common reference frame. These frames help in defining the transformations between different segments of the arm.</p>"},{"location":"page1/#wrf","title":"WRF","text":"<p>World reference frame This is a static frame that is fixed in real world. It is usually located in the base of the robot.  For PAROL6 it is located in the base. See figure xx. Coordinate frame represents world frame.</p>"},{"location":"page1/#trf","title":"TRF","text":"<p>TRF - Tool reference frame Reference frame that is associated to robots end-effector. This frame changes depending on what end effector you use. </p> <p> </p> <pre><code>                    Figure 4: Robot with TRF\n</code></pre>"},{"location":"page1/#links","title":"Links","text":"<p>The links represent the rigid segments or sections of the robotic arm. These could be actual physical components or conceptual representations. Links are typically depicted as straight lines connecting joints. Links can for example be shoulder, wrist, forearm...</p>"},{"location":"page1/#joints","title":"Joints","text":"<p>The joints represent the articulation points where motion occurs. These can include revolute joints (rotational) and prismatic joints (linear). Joints are often shown as small circles or symbols, with appropriate labels indicating the type of joint and possibly its degree of freedom.</p>"},{"location":"page1/#joint-limits","title":"Joint limits","text":""},{"location":"page1/#kinematic-diagram","title":"Kinematic diagram","text":"<p>A kinematic diagram of a robotic arm is a simplified graphical representation that illustrates the arrangement of links and joints in the robotic arm. It serves to convey the essential geometric and kinematic relationships between the various components of the arm without necessarily capturing all the physical details.</p> <p> </p>"},{"location":"page1/#denavit-hartenberg-parameters","title":"Denavit-Hartenberg parameters","text":"<p>Denavit-Hartenberg parameters are a set of standardized parameters used to describe the geometry and kinematics of robotic arms and mechanisms. They provide a systematic way to represent the transformation between consecutive coordinate frames along a robot's kinematic chain. These parameters were introduced by Jacques Denavit and Richard S. Hartenberg in the 1950s and have become a fundamental tool in robotics.</p> <p>The Denavit-Hartenberg parameters consist of four values associated with each joint of a robotic arm:</p> <ul> <li>Link Length (a): The distance between the common normal (perpendicular) to the current and next joint axes, measured along the previous joint axis.</li> <li>Link Twist (\u03b1): The angle between the common normal of the current and next joint axes, measured along the previous joint axis.</li> <li>Link Offset (d): The distance between the joint axes along the common normal, measured along the current joint axis.</li> <li>Joint Angle (\u03b8): The angle of rotation or translation about the current joint axis to align the coordinate frames.</li> </ul> <p>These parameters are defined for each pair of consecutive joints in the robot's kinematic chain. By applying a sequence of transformations using these parameters, you can calculate the overall transformation matrix that represents the position and orientation of each link relative to a reference frame.</p> <p>The Denavit-Hartenberg parameters provide a consistent and concise way to model and analyze the kinematics of complex robotic systems, making them a widely used approach in robot design, control, and simulation.</p> <p> </p> <p>Great resources on how to build your robot using DH parameters:</p> <ul> <li>Link</li> <li>Link</li> <li>Link</li> </ul>"},{"location":"page1/#forward-kinematics","title":"Forward kinematics","text":"<p>Forward kinematics is a fundamental concept in robotics that involves determining the position and orientation of a robot's end effector (such as a gripper or tool) based on the known joint angles and link parameters. In simpler terms, it's the process of calculating the robot's pose (position and orientation) in space given the joint configurations.</p> <p>The forward kinematics problem is about understanding how the robot's various joints and links combine to determine the position and orientation of the end effector. It's like tracing the path of the robot's movements to find out where its hand or tool ends up.</p>"},{"location":"page1/#inverse-kinematics","title":"Inverse kinematics","text":"<p>Inverse kinematics is a fundamental concept in robotics that involves determining the joint angles or parameters of a robotic mechanism in order to achieve a desired end-effector position and orientation. In simpler terms, it's the process of calculating the joint configurations that will result in a specific pose (position and orientation) of the robot's end-effector (e.g., its hand or tool).</p> <p>In a robotic arm, for example, the forward kinematics process involves calculating the position and orientation of the end-effector based on the given joint angles. Inverse kinematics, on the other hand, works the opposite way: given a desired position and orientation for the end-effector, it calculates the joint angles that will achieve that particular pose.</p> <p>Inverse kinematics can be quite complex, especially for robots with multiple joints and degrees of freedom. Solving inverse kinematics involves finding solutions to sets of nonlinear equations that relate the joint variables to the desired end-effector pose. Depending on the robot's geometry and the specific task at hand, there may be multiple solutions, a unique solution, or even no solution.</p> <p>Inverse kinematics is crucial for tasks such as trajectory planning, motion control, and object manipulation, as it allows the robot to determine how to move its joints to achieve a specific goal in its operational environment. It's used in applications ranging from industrial robotics and automation to animation and simulation.</p>"},{"location":"page1/#task-planning","title":"Task planning","text":""},{"location":"page1/#path-planning","title":"Path planning","text":""},{"location":"page1/#resolved-rate-motion","title":"Resolved rate motion","text":""},{"location":"page1/#trahjectory-planning","title":"Trahjectory planning","text":""},{"location":"page1/#trajectory-following","title":"Trajectory following","text":""},{"location":"page1/#joint-space","title":"Joint space","text":""},{"location":"page1/#cartesian-space","title":"Cartesian space","text":""},{"location":"page1/#jacobian","title":"Jacobian","text":""},{"location":"page1/#3d-representation","title":"3D representation","text":""},{"location":"page1/#singularity","title":"Singularity","text":"<p>Unless you deal with a simple pick and place application you need to learnabout robot singularities and configuratios. Singularity is a configuration where the robot end effector loses a degree of freedom. When moving near singularity in cartesian mode, the robot might stop.</p>"},{"location":"page1/#workspace","title":"Workspace","text":""},{"location":"page1/#reach","title":"Reach","text":""},{"location":"page1/#velocity-control","title":"Velocity control","text":""},{"location":"page1/#position-control","title":"Position control","text":""},{"location":"page1/#torque-control","title":"Torque control","text":""},{"location":"page1/#blends","title":"Blends","text":""},{"location":"page1/#trajectory","title":"Trajectory","text":""},{"location":"page1/#optimal-path-placement","title":"Optimal path placement","text":"<p>Optimal path placement leads to faster cycle times and larger paths optimal choice of configuration leaed to larger workspace design cell layout correctly a lot of trial and error.</p>"},{"location":"page1/#trapezoidal-velocity-profile","title":"Trapezoidal velocity profile","text":""},{"location":"page1/#polynomial-velocity-profile","title":"Polynomial velocity profile","text":"<p>A quintic (5th order) polynomial is used with default zero boundary conditions for velocity and acceleration.  Zero boundary conditions mean that  typically means that you assume  that the velocity and acceleration are zero at the endpoints of the interval being interpolated.  This assumption is often used when constructing interpolating polynomials for motion or  physical systems where you want to ensure that the motion starts and ends from rest (zero velocity and acceleration).</p> <p> </p>"},{"location":"page1/#mastering-the-robot","title":"Mastering the robot","text":""},{"location":"page1/#robot-mastering","title":"Robot mastering","text":""},{"location":"page1/#zero-position-mastering","title":"zero position mastering","text":""},{"location":"page1/#witness-marks","title":"Witness marks","text":""},{"location":"page1/#backlash","title":"Backlash","text":""},{"location":"page1/#actuators","title":"Actuators","text":""},{"location":"page1/#machine-learning","title":"Machine learning","text":""},{"location":"page1/#communication-protocols","title":"Communication protocols","text":""},{"location":"page1/#robot-loop-times","title":"Robot loop times","text":""},{"location":"page1/#open-loop-control","title":"Open loop control","text":""},{"location":"page1/#closed-loop-control","title":"Closed loop control","text":""},{"location":"page1/#stepper-motors","title":"Stepper motors","text":""},{"location":"page1/#encoders","title":"Encoders","text":""},{"location":"page1/#pid-loops","title":"PID loops","text":""},{"location":"page1/#homing","title":"Homing","text":""},{"location":"page1/#ros","title":"ROS","text":""},{"location":"page1/#matlab","title":"Matlab","text":""},{"location":"page1/#test","title":"Test","text":""},{"location":"page2_2/","title":"Robot specifications","text":""},{"location":"page2_2/#specs","title":"Specs","text":"<ul> <li>Payload: 1 Kg</li> <li>Weight: 5.5 Kg</li> <li>Reach: 400 mm with the standard gripper</li> <li>Degrees of freedom: 6 rotating joints</li> <li>Material: 3D printed PETG plastic</li> <li>Power consumption: 40W</li> <li>Repeatability: 0.1 mm</li> <li>Precision: </li> <li>Rotation range: </li> <li>1 \u2013 250 deg</li> <li>2 \u2013 141 deg</li> <li>3 \u2013 180 deg</li> <li>4 \u2013 212 deg</li> <li>5 \u2013 180 deg</li> <li>6 - \u221e</li> <li>Motors: Steppers</li> <li>Gearboxes: precision planetary and bets</li> <li>Position sensing: Limit switches for open loop version, magnetic encoders for closed-loop version</li> <li>Drivers: Open-loop stepper drivers for open loop version, custom FOC Stepper drivers for closed-loop</li> <li>Number of isolated inputs: 2</li> <li>Number of isolated outputs: 2</li> <li>Number of CAN buses: 2</li> <li>Communication with master PC: USB </li> <li>Pneumatic connectors: 2</li> </ul>"},{"location":"page2_2/#dimensions","title":"Dimensions","text":"<p>Dimensions using default pneumatic gripper!</p> a1 110.50 mm a2 23.42 mm a3 180.00 mm a4 43.50 mm a5 176.35 mm a6 62.8 mm a7 45.25 mm <p>Dimensions can change!</p> <p>For example when you change grippers or put robot on aditional base.  If that happens you need to change your parameters in DH table, otherwise you kinematic diagram will be wrong  </p>"},{"location":"page2_2/#kinematic-diagram","title":"Kinematic diagram","text":"<p>Dimensions can change!</p> <p>For example when you change grippers or put robot on aditional base.  If that happens you need to change your parameters in DH table, otherwise you kinematic diagram will be wrong  </p> <p> </p> <ul> <li>Digram for the robot using standard pneumatic gripper</li> </ul>"},{"location":"page2_2/#denavit-hartenberg-parameters","title":"Denavit-Hartenberg parameters","text":"<p>Standby position</p> <p>THIS IS THE POSITION OF THE ROBOT DEFINED BY THE DH TABLE BELOW!  This position is also called standby positon!   In this position joint angles are as follows:   Joint 1 -&gt; 0 degress   Joint 2 -&gt; -90 degress   Joint 3 -&gt; 180 degrees   Joint 4 -&gt; 0 degrees   Joint 5 -&gt; 0 degrees   Joint 6 -&gt; 180 degrees  </p> <p> </p>"},{"location":"page2_2/#joint-reduction-ratios-and-microstepping","title":"Joint reduction ratios and microstepping","text":"<p>Reduction ratios for each joint are as follows:</p> <ul> <li>Joint 1 -&gt; Belt reduction: 6.4 : 1</li> <li>Joint 2 -&gt; Planetary gearbox: 20 : 1</li> <li>Joint 3 -&gt; Planetary gaerbox: 20 : 1 x Belt reduction 38 : 42 = 18.0952381</li> <li>Joint 4 -&gt; Belt reduction: 4 : 1</li> <li>Joint 5 -&gt; Belt reduction: 4 : 1</li> <li>Joint 6 -&gt; Planterary gearbox: 10 : 1</li> </ul> <p>Robot uses stepper motors. Microstepping is on all motors equal to 32.  With 32 microstepping regular 200 steps per revolution stepper motor needs 6400 steps for one revolution.</p> <p>Smallest theoretical steps with 32 microstep at the joint levels are   (these values are after the reduction ratios!): * Joint 1 -&gt; 0.00015339807878856412 RAD --&gt; 0.0087890625 DEG * Joint 2 -&gt; 4.9087385212340514e-05 RAD --&gt; 0.0028125 DEG  * Joint 3 -&gt; 5.4254478392586896e-05 RAD --&gt; 0.0031085526315789477 DEG * Joint 4 -&gt; 0.0002454369260617026 RAD  --&gt; 0.0140625 DEG * Joint 5 -&gt; 0.0002454369260617026 RAD  --&gt; 0.0140625 DEG * Joint 6 -&gt; 9.817477042468103e-05 RAD  --&gt; 0.005625 DEG</p>"},{"location":"page2_2/#joint-limits","title":"Joint limits","text":"<p>TIP</p> <p>Joint limits can change depending on type of gripper or base!   When using the robot make sure you use proper joint limits for your aplicaiton!  </p> <p>Robot joint positive rotations are in the directions shown on the image!</p> <p> </p> <p>TIP</p> <p>Values are in degrees!</p> Joint Limit in negative direction Standby position Limit in positive direction J1 -123.046875 0 123.046875 J2 145.0088 -90 -3.375 J3 107.866 180 287.8675 J4 -105.46975 0 105.46975 J5 -90 0 90 J6 0 180 360"},{"location":"page3_1/","title":"PAROL6 control board","text":""},{"location":"page3_1/#introduction","title":"Introduction","text":"<p>The PAROL6 control board is the advanced 32-bit controller for 6 AXES robotic arms like PAROL6. It works out of the box with PAROL6 and PAROL6 commander software.</p> <p>To use PAROL6 robotic arm you will need a PAROL6 control board. The PAROL6 control board is a compact robotic controller. It is by size a little bigger than a pack of playing cards. It allows PAROL6 to be a really small and portable robot without the need for a control cabinet that is usually the size of the whole robot.</p>"},{"location":"page3_1/#features","title":"Features","text":""},{"location":"page3_1/#hardware-specs","title":"Hardware specs","text":"Processor 110.50 mm Processor features 23.42 mm Communication interfaces 180.00 mm Stepper drivers 43.50 mm Stepper drivers features 176.35 mm Inputs 62.8 mm Ouputs 45.25 mm Estop input 62.8 mm AdDitional memory 45.25 mm Programming  interface JTAG Cooling fan connection 62.8 mm Connection for smart power button 45.25 mm"},{"location":"page3_1/#operating-limits","title":"Operating limits","text":"Power supply 18V minimal, 24V maximal voltage Stepper drivers Rated current 2.5A, maximal current 3.6A (Short burst or extreme cooling) Temperature xx stepper driver temperature warrning, xx temperature error Isolated Inputs voltage 24V nominal voltage, min 12V max 50V Isolated Outputs voltage 176.35 mm Isolated Inputs current 24V nominal voltage, min 12V max 50V Isolated Outputs current 176.35 mm Fuse Fuse is used for outputs if used in NON ISOLATED MOD; 2A fuse Cooling fan Maximal allowed current draw for cooling fan is 0.3A"},{"location":"page3_1/#physical-properties","title":"Physical properties","text":""},{"location":"page3_1/#dimensions","title":"Dimensions","text":"<p>Note</p> <p> Dimensions are in milimeters! </p> <p> </p>"},{"location":"page3_1/#mounting","title":"Mounting","text":"<p>3 Holes located on PAROL6 control board are used to mount the PCB. Use M3 screws!</p>"},{"location":"page3_1/#cooling","title":"Cooling","text":"<p>Stepper drivers need cooling. It can be done with nocuta fan or any other 5V tolerant fan that fits the robot. In case of PAROL6 the fan needs to be of these dimensions: 40x40x20</p> <p>Keep fan current draw around 0.1 A. Do not go over 0.3 A.</p>"},{"location":"page3_1/#3d-models","title":"3D models","text":""},{"location":"page3_1/#connections","title":"Connections","text":""},{"location":"page3_1/#connectors","title":"Connectors","text":"<ul> <li> <p>24 power connector on PAROL6 control board is XT30 MALE connector. </p> </li> <li> <p>Connector for cooling fan on PAROL6 control is </p> </li> <li> <p>Connector for power on/off button on PAROL6 control is </p> </li> <li> <p>Connector for USB on PAROL6 control is USB female type B</p> </li> </ul>"},{"location":"page3_1/#schematic","title":"Schematic","text":"<p>Note</p> <p> View schematic in PDF view. Images are hard to read! </p> <p>Link to PDF schematic!</p> <p> </p> <p> </p> <p> </p>"},{"location":"page3_1/#pin-connections","title":"Pin connections","text":""},{"location":"page3_1/#pin-definitions","title":"Pin definitions","text":"<p>TIP</p> <p>Even tho pins are named PUL1-PUL6 that does not mean they are  connected to that joint of the robot! Follow the connection plan below for  real connections! </p> <p>Connections:</p> <pre><code>    #define PUL1 PC6 ---&gt; Controls Joint 1, PULS pin of stepper driver\n    #define PUL2 PA10 --&gt; Controls Joint 5, PULS pin of stepper driver\n    #define PUL3 PC0 ---&gt; Controls Joint 6, PULS pin of stepper driver\n    #define PUL4 PC3 ---&gt; Controls Joint 4, PULS pin of stepper driver\n    #define PUL5 PC9 ---&gt; Controls Joint 3, PULS pin of stepper driver\n    #define PUL6 PC5 ---&gt; Controls Joint 2, PULS pin of stepper driver\n\n    #define DIR1 PB15 --&gt; Controls Joint 1, DIR pin of stepper driver\n    #define DIR2 PA1 ---&gt; Controls Joint 5, DIR pin of stepper driver\n    #define DIR3 PC1 ---&gt; Controls Joint 6, DIR pin of stepper driver\n    #define DIR4 PA0 ---&gt; Controls Joint 4, DIR pin of stepper driver\n    #define DIR5 PA8 ---&gt; Controls Joint 3, DIR pin of stepper driver\n    #define DIR6 PB1 ---&gt; Controls Joint 2, DIR pin of stepper driver\n\n    #define LIMIT1 PC12 ---&gt; Connected to Limit 1 on PAROL6 control board\n    #define LIMIT2 PB3  ---&gt; Connected to Limit 2 on PAROL6 control board\n    #define LIMIT3 PA15 ---&gt; Connected to Limit 3 on PAROL6 control board\n    #define LIMIT4 PD2  ---&gt; Connected to Limit 4 on PAROL6 control board\n    #define LIMIT5 PB4  ---&gt; Connected to Limit 5 on PAROL6 control board\n    #define LIMIT6 PC11 ---&gt; Connected to Limit 6 on PAROL6 control board\n\n    #define SELECT1 PC7  ---&gt; Controls Joint 1, Select pin of stepper driver\n    #define SELECT2 PA9  ---&gt; Controls Joint 5, Select pin of stepper driver\n    #define SELECT3 PC15 ---&gt; Controls Joint 6, Select pin of stepper driver\n    #define SELECT4 PC2  ---&gt; Controls Joint 4, Select pin of stepper driver\n    #define SELECT5 PC8  ---&gt; Controls Joint 3, Select pin of stepper driver\n    #define SELECT6 PC4  ---&gt; Controls Joint 2, Select pin of stepper driver\n\n    #define GLOBAL_ENABLE PA3  --&gt; Connected to ENABLE pins of all stepper drivers.\n\n    #define MISO PA6    --&gt; SPI MISO; connected to all 6 stepper drivers and flash memory\n    #define MOSI PA7    --&gt; SPI MOSI; connected to all 6 stepper drivers and flash memory\n    #define SCK PA5     --&gt; SPI SCK; connected to all 6 stepper drivers and flash memory\n    #define FLASH_SELECT PA4 --&gt; Chip select pin of the flash memory\n\n    #define LED1 PB2  --&gt; LED1 on PCB\n    #define LED2 PB10 --&gt; LED2 on PCB\n\n    #define SUPPLY_ON_OFF PC10 --&gt; Connected to power button connector, turns on/off power fet\n    #define SUPPLY_BUTTON_STATE PC14  --&gt; Connected to power button connector, reads state of the button\n\n    #define INPUT1 PB6      --&gt; Connected to IN1 pins on the side of the board\n    #define INPUT2 PB5      --&gt; Connected to IN2 pins on the side of the board\n\n    #define OUTPUT1 PC13    --&gt; Connected to OUT2 pins on the side of the board\n    #define OUTPUT2 PB7     --&gt; Connected to OUT2 pins on the side of the board\n\n    #define ESTOP PB14 --&gt; Connected to ESTOP pins on the side of the board\n\n    #define VBUS PB0   --&gt; Reads voltage of the power supply voltage\n\n    #define USB_D_PLUS  PA12 --&gt; USB pins\n    #define USB_D_MINUS PA11 --&gt; USB pins\n\n    #define CAN1TX PB9      --&gt; CAN channel 1\n    #define CAN1RX PB8      --&gt; CAN channel 1\n\n    #define CAN2TX PB13     --&gt; CAN channel 2\n    #define CAN2RX PB12     --&gt; CAN channel 2\n</code></pre>"},{"location":"page3_1/#stepper-driver-orientation","title":"Stepper driver orientation","text":"<p>Danger</p> <p> Only use step sticks that are verified in this document!   Failing to do so will destroy your PAROL6 control board! </p> <p>Stepper drivers need to be placed with respect to this diagram to the PAROL6 control board! Stepper drivers orientation can be recognised by 2 diagnostic pins!</p> <p> </p>"},{"location":"page3_1/#how-to-upload-code","title":"How to upload code","text":"<p>Microcontroller on PAROL6 control board is STM32F446RE. To upload code you need to use STlink device and connect it dedicated CLK, SWDIO, 3V3 and GND pins. You can use jumper cables or dedicated stlink + cable assembly.</p>"},{"location":"page3_1/#getting-connected","title":"Getting connected","text":""},{"location":"page3_1/#wiring-parol6-control-board","title":"Wiring PAROL6 control board","text":""},{"location":"page3_1/#software","title":"Software","text":""},{"location":"page3_1/#parol6-control-software-structure","title":"PAROL6 control software structure","text":""},{"location":"page3_1/#api","title":"API","text":""},{"location":"page3_1/#firmware-configuration","title":"Firmware configuration","text":""},{"location":"page3_1/#pcb-revision-history","title":"PCB revision history","text":"<p>After sucesssful wiring of the robot it should look something like this. </p> <p> </p>"},{"location":"page3_2/","title":"Getting started","text":""},{"location":"page3_2/#assembly-manual","title":"Assembly manual","text":"<p>Assembly manual is located in Github repository.  Of course to use the robot you will have to build/buy it.   If you decide to build it or buy a kit you will need to follow the assembly manual to make it.   Assembly manual is also great tool for reparing and upgrading your robot. Make sure you use the latest version of the manual.  Version is marked on the first page in the bottom left corner.</p>"},{"location":"page3_2/#powering-on","title":"Powering on","text":"<p>PAROL6 requires 3 connections for normal operation.</p> <ul> <li> <p>Power connection -&gt; Marked green on image</p> </li> <li> <p>USB connection -&gt; Marked blue on image</p> </li> <li> <p>ESTOP -&gt; Marked with yellow and pink squares</p> </li> </ul> <p>First connect power cable (marked green). After that you can turn robot on and off by pressing power button (marked red).</p>"},{"location":"page3_2/#powering-off","title":"Powering off","text":"<p>Do not try to power off the robot when it is running!</p> <p> If robot start to behave unexpectedly USE ESTOP.  If ESTOP is not functional power of the supply.  Reaching for the power button should be the last option.</p> <p>Because lack of brakes sudden loss of power will result in robot falling down. That may cause damage to the robot or the operator. Robot is powered on and off by pressing a button marked red on the image. When powering the robot on even when USB connection is not available it will energise the the motors. It will produce 6 clicking sounds and that is normal behaviour.</p> <p>Powering off the robot is also done by pressing button marked in RED. Before you power off the robot GRAB IT BY THE FOREARM and then press the button. This will ensure that robot does not fall down. THESE STEPS ARE MANDATORY Failing to do so will damage your robot!</p>"},{"location":"page3_2/#installing-parol6-commander-software","title":"Installing PAROL6 commander software","text":"<p>Commander software can be located in Github repository.  Some prerequisites you will need to have are: </p> <ul> <li>python </li> <li>pip3 </li> </ul> <p>Commander software was tested on machines with these specifications: </p> <ul> <li>Windows 10, Ryzen 5, 32gb ram, Nvidia 3060  </li> <li>Windows 10,  </li> </ul>"},{"location":"page3_2/#parol6-control-board","title":"PAROL6 control board","text":"<p>Warning</p> <p>When uploading code with stlink to the robot DISCONNECT THE 24V supply from the robot. After the code is uploaded disconnect the stlink and connect power supply. </p> <p>Look at the PAROL6 control board page.</p>"},{"location":"page3_2/#first-startup","title":"First startup","text":"<p>When first starting the robot biggest and most common problem is that motors will turn in different directions from those they were supposed to move. There are 2 ways to fix this:  * Open the robot base and replace wires of one of the stepper motor phases  * RECOMMENDED; Upload a new code to PAROL6 control board with small changes to the code</p> <p>If you are going with code edit solution you will need to edit these segments of code: xxxxx xxxxx</p> <p>Another problem that is not so critical when starting up is that your joints are not calibrated. That means that robot thinks it is some position but in reality it is not. This problem accours because of different tolerances of printed parts, different belt tensions, different bearing preload...  It can be fixed by looking at a motor_init.cpp file for PAROL6 control board. In that file you can find bunch of paremeters for robots motors. One we need is called \"direction_reversed\" For joint that are moving in wrong direction change the value of that variable if it was 1 to 0 and if it was 0 to 1.</p>"},{"location":"page3_2/#quick-start-guide","title":"Quick start guide","text":"<ul> <li>attach the robot to table or workstation.</li> <li>Make sure you have driver board that has firmware on it!</li> <li>Connect power supply and USB to your robot.</li> <li>Test if you can move your robots joints freely.</li> <li>Move the robot close to the position shown on the image. </li> <li>Press the power button. Power button locks all the joints to the current position.</li> <li>After power button is pressed you can turn on commander software.</li> <li>After the commander software started you will see 2 windows: Simulator window and GUI window</li> <li>Simulator will not be calibrated to the robot and GUI will display wrong joint and cartesian coordinates.</li> <li>Go to joint jog menu and try to jog the motors.</li> <li>Arrows pointing to the left represent negative rotation of the joint and arrows pointing to the right positive.</li> <li>Positive and negative rotations of the joints are shown on the image below</li> <li>Comfirm that every joint moves coresponding joint in right direction. If not fallow the above guide to calibrate it.</li> <li>Once you adjusted your joint rotations repet all the previous steps and confirm correct rotations.</li> <li>Press the home button. All joints of the robot will start to move. Be close to the estop of the robot in case the estops stop working or robot crashed. If you hear grinding noise when robot is close to the limit switch press the estop emediately. That means your estop for that joint is not working and you need to check your wiring.</li> <li>If the robot homes correctly it will be in this position. Small deviations are ok since your robot is still not calibrated </li> <li>Simulator is now sinced to the robot and GUI shows correct values.</li> <li>Congrats you have a functional PAROL6 robot to work with!</li> </ul>"},{"location":"page3_2/#maintenance","title":"Maintenance","text":""},{"location":"page3_2/#belts","title":"Belts","text":"<p>We recommend to periodically check your belt tension and apply greese to the belts. If you see that the belt is not tight enough place another tension bearing as shown in the pictures. </p> <p>Belts are located on Joints: 1,3,4,5</p> <p> </p> <p> </p> <p> </p>"},{"location":"page3_2/#couplers-and-threadlocker","title":"Couplers and threadlocker","text":""},{"location":"page4/","title":"Software","text":"<p>To operate PAROL6 robot you need a:</p> <ul> <li>High level software running on your PC</li> <li>Low level software running on PAROL6 control board</li> </ul> <p>For high level software there are multiple options:</p> <ul> <li>Use PAROL6 commander software for control, programming, simulating</li> <li>Use our API to send command thur your languange of choice Matlab, python, c++</li> <li>Use ROS</li> </ul> <p>For low level software only PAROL6 control board software is available.  PAROL6 commander software allows you to write simple robot arm scripts. Scripting language is called </p>"},{"location":"page4/#parol6-commander-software","title":"PAROL6 commander software","text":"<p>It is devided in multiple files: xxx xxx xxx</p>"},{"location":"page4/#structure","title":"Structure","text":""},{"location":"page4/#dependancy","title":"Dependancy","text":""},{"location":"page4/#how-to-run-install","title":"How to run / Install","text":""},{"location":"page4/#parol6-control-board-software","title":"PAROL6 control board software","text":"<p>Structure of the code:</p>"},{"location":"page4/#parol6-control-board-software-api","title":"PAROL6 control board software API","text":""},{"location":"page4/#code-upload-to-parol6-control-board-software","title":"Code upload to PAROL6 control board software","text":"<p>To upload code on your PAROL6 board you need a programming cable and stlink device</p>"},{"location":"page4/#communication-protocol","title":"Communication protocol","text":"<p>Communication is based on UART and is being done over USB cable from the robot to the PC. The usual baud rate is 3Mbit. Data is sent to the robot at 100Hz (If your PC is not good enough this can be decrease but performance will suffer). Data is sent in specially packed compact data packets. </p> <p> </p> <pre><code>    Figure: Data packets in table format. As you can see both packets combined have less then 120 bytes. \n    With transmission speed of 3Mbit it takes 0.3 ms for a whole round trip of data!\n</code></pre> <p>Robot needs to receive valid data packet in the format defined above.  Pseudo code of how it works on PAROL6 control board:</p> <pre><code>While(1){\n\n    Perform tasks\n\n    While (Serial data available){\n        * input byte = read serial data, This reads one byte from the buffer\n        * First condition is that 3 start bytes are correct.\n        * Once Len byte is received we know how many bytes we need to get.\n        * After we get that number of bytes we check end bytes and CRC.\n        * After that we proces the data, unpack it and save in corensponding variables.\n        * After that we pack the robots telemetry data we will need to send to the PC\n\n    }\n\n}\n</code></pre> <p>So if a robot receives good data packet, meaning good first 3 bytes, len, CRC and end bytes we can start to proces the data. That signals start of one robot loop cycle.</p> <p>Duty of PC (or any other device you wish to use to control your PAROL6) is to send data at sufficiently fast loop times. Time between 2 last commands is returned by PAROL6 control board in variable Timing data.   Timing data is variable that is 2 bytes long. </p> <ul> <li>Freq is 90Mhz, with 128 prescale we get 703125, timer is 16bit</li> <li>It counts to 65535. 1 Tick is then equal to 1/703125 = 1.422222e-6</li> <li>To get 10 ms we need 7031 ticks</li> </ul> <p>By viewing that variable you can check if your loop times are correct.</p>"},{"location":"page4/#pc-robot","title":"PC -&gt; robot","text":"<p>The protocol from PC -&gt; robot consists of three types of commands:</p> <ul> <li>Active </li> <li>Passive </li> <li>Carrier </li> </ul> <p>The protocol from robot - PC consists only of robots telemetery data.</p>"},{"location":"page4/#list-of-active-commands","title":"List of active commands","text":"<p>Active commands can only be given by the \"command\" argument and is represented by one byte. That means there can only be 255 possible  commands.</p> <pre><code>0X123 - JOG\n0x156 - Go 2 positon with speed\n0X100 - Home command\n0x101 - Enable robot\n0x102 - Disable robot\n0x103 - Clear error\n0x255 - Dummy data\n</code></pre>"},{"location":"page4/#passive-commands","title":"Passive commands","text":"<p>Passive commands are for example io commands and gripper commands. They are always sent with the data packet. Passive commands do not affect movement of the robot joints and by that can be injected in any active command. </p>"},{"location":"page4/#carrier-commands","title":"Carrier commands","text":"<p>Carrrier commands are joint speeds and positions that are modifiers for active movement commands. </p>"},{"location":"page4/#robot-input-packet-pc-robot","title":"Robot input packet (PC -&gt; robot)","text":"<pre><code>uint8_t start_bytes[] = {0xff, 0xff, 0xff};         // 3 byte\nint len = 52;                                       // 1 byte\nint Joints[6];                                      // each joint is 3 bytes; total of 18 bytes\nint Speed[6];                                       // each joint is 3 bytes; total of 18 bytes\nint Command = 255;                                  // 1 byte\nint Affected_joint[] = {1, 1, 1, 1, 1, 1, 1, 1};    // 1 byte\nint InOut[] = {1, 1, 1, 1, 1, 1, 1, 1};             // 1 byte\nint Timeout;                                        // 1 byte\nint Gripper_position;                               // 2 byte\nint Gripper_speed;                                  // 2 byte\nint Gripper_current;                                // 2 byte\nint Gripper_command;                                // 1 byte\nint Gripper_mode;                                   // 1 byte\nint Gripper_ID = 212;                               // 1 byte\nint CRC_byte = 212;                                 // 1 byte\nint end_bytes[] = {0x01, 0x02};                     // 2 byte\n</code></pre>"},{"location":"page4/#robot-output-packet-robot-pc","title":"Robot output packet (ROBOT -&gt; PC)","text":"<p>Data sent from the robot to the PC consists only of robots telemetry data and flags.</p> <pre><code>uint8_t start_bytes[] = {0xff, 0xff, 0xff};             // 3 byte\nint len = 56;                                           // 1 byte\nint Position_out[] = {255, 254, 253, 252, 251, 250};    // each joint is 3 bytes; total of 18 bytes\nint Speed_out[] = {245, 244, 243, 242, 241, 240};       // each joint is 3 bytes; total of 18 bytes\nbool Homed[] = {1, 1, 1, 1, 1, 1, 1, 1};                // 1 byte\nbool IO_var[] = {0, 0, 0, 0, 0, 0, 0, 0};               // 1 byte\nbool temp_error[] = {1, 1, 1, 1, 1, 1, 1, 1};           // 1 byte\nbool position_error[] = {0, 0, 0, 0, 0, 0, 0, 0};       // 1 byte\nint timing_data = 255;                                  // 2 byte\nint timeout_error = 244;                                // 1 byte\nint xtr2 = 255;                                         // 1 byte\nint gripper_ID = 200;                                   // 1 byte\nint gripper_position = 300;                             // 2 byte\nint gripper_speed = 300;                                // 2 byte\nint gripper_current = 300;                              // 2 byte\nint gripper_status = 200;                               // 1 byte\nint object_detection = 1;                               // 1 byte\nint CRC_byte = 212;                                     // 1 byte\nint end_bytes[] = {0x01, 0x02};                         // 2 byte\n</code></pre>"},{"location":"page4/#commander-software-api","title":"Commander software API","text":""},{"location":"page4/#rbtscript","title":"RBTscript","text":"<p>PAROL6 commander software allows you to write simple robot arm scripts. Scripting language is called RBTscript. It allows you to move the robot in joint space or cartesian space, use delay functions, control outputs and grippers, read inputs and much more!</p>"},{"location":"page4/#introduction","title":"Introduction","text":"<p>Commands are executed sequentally. they have tact of loop time!</p>"},{"location":"page4/#units-used","title":"Units used","text":"<p>There is a lot of conversion of units in robotics and PAROL6 is not an exception to that. To keep things simple and accurate we compiled where these conversions happen, why and how.</p>"},{"location":"page4/#angle","title":"Angle","text":"<p>Units for angles used in PAROL6 commander software are DEGREES. What we are sending PAROL6 control board are STEPS. For all calculations used in PAROL6 commander software RADIANS are used.</p>"},{"location":"page4/#distance","title":"Distance","text":"<p>Units for distance used in PAROL6 commander software are milimeter [mm]. In the backend meters are used for all caculations</p>"},{"location":"page4/#speed","title":"Speed","text":"<p>In the GUI speeds setpoints can only be set using %. Units of speed used in PAROL6 commander software backend are either STEPS/s , RAD/s or DEG/s for rotations or mm/s or m/s for translations. </p>"},{"location":"page4/#acceleration","title":"Acceleration","text":"<p>In the GUI acceleration setpoints can only be set using %.  Units of acceleration used in PAROL6 commander software backend are either STEPS/ss , RAD/ss or DEG/ss for rotations or mm/ss or m/s*s for translations. In the GUI acceleration setpoints can only be set using %.</p>"},{"location":"page4/#how-to-write-code","title":"How to write code!","text":""},{"location":"page4/#how-are-trajectories-generated","title":"How are trajectories generated?","text":""},{"location":"page4/#how-are-they-tracked","title":"How are they tracked?","text":"<p>There are 2 ways we can command robots trajectory: For example we want joint 6 to move from 260 deg to 180 degree. We want to follow trap velocity profile and get to 260 position in 2 seconds. We generated speed and position curves.  Now if we command only the speed curve robot will follow it perfectly but if the move is too long or too fast it will miss the demanded  positon. Why? We are sending commands every 10 ms. but it is not always exactly 10 ms since your PC is not real time machine. Another thing is that steppers cant execute some really small speed moves from the begging and the ends of the speed curve. Because of that positon is missed usually.  How to compensate that? Using the  position curve! Using current positon and commadned positon we calculate how fast you need to go. After that take that speed and add commanded speed from the speed curve and average that. This gives the results you can see in the plots below. In commands MoveJoint, MovePose, MoveCart and MoveCartRelTRF following only with speed or speed + positon can be selected by \"speed\" argument.</p> <p> </p> <pre><code>      Figure: Trapezoidal velocity profile. BLUE is commanded velocity profile and RED is actual robot speed. \n       These diagrams are for mode where both positon and speed are commanded and avg was taken. Green lines \n       show that robot is 1/3 of the path in acceleration 1/3 in cruise and 1/3 in deceleration.\n</code></pre> <p> </p> <pre><code>        Figure: Positon curve when following only with speed vs speed + positon.  \n        You can see they are both really close but with speed and positon robot comes to  \n        exactly the commanded positon. This plot is for trapezoidal velocity profile.\n</code></pre> <p> </p> <pre><code>        Figure: This is same commanded positon but with polynomial. \n         As you can see same applies as for trapezoidal\n</code></pre>"},{"location":"page4/#functions","title":"Functions","text":""},{"location":"page4/#movejointj1j2j3j4j5j6v0a0t0funcspeed","title":"MoveJoint(j1,j2,j3,j4,j5,j6,v=0,a=0,t=0,func,speed)","text":"<p>Robot will move all its joints to the desired positons tracking a specific velocity curve. Joints will stop at the same time at the desired positons. The path is linear in joint space, because of that actuator motion is easy to validate and predict but TRF/end-effector is hard to predict. Can track trapezoidal velocity profile or polynomial veloctiy profile. User can set desired duration of the move or specific acceleration and velocity.  The move can be tracked based on speed curve alone or combination of commanded speed curve and position curve.</p> <ul> <li>j1,j2,j3,j4,j5,j6 -&gt; desired joint values [degrees] REQUIRED ELEMENT</li> <li>a -&gt; desired acceleration and deaceleration of leading joint [% from 0 - 100] OPTIONAL ELEMENT</li> <li>v -&gt; speed of leading joint (Joint that needs to travel the longest) [% from 0 - 100] OPTIONAL ELEMENT</li> <li>t -&gt; desired duration of the move [s] OPTIONAL ELEMENT</li> <li>func -&gt; can be \"poly\" or \"trap\" [no unit] OPTIONAL ELEMENT</li> <li>speed -&gt; can be speed or nothing [no unit] OPTIONAL ELEMENT</li> </ul> <p>Arguments need to be given in above defined order!</p> <p>If t is defined robot will finish its move in that defined time. t overrides a and v if they are given. Here default func is \"poly\". Even if it is not defined robot will use \"poly\". In case you want to use trapezoidal profile use func \"trap\". When using trapezoidal profile and t is defined speed profile will be 1/3 acceleration, 1/3 cruise speed, 1/3 deaceleration. Example:</p> <pre><code>MoveJoint(0,-90,180,0,0,180,t=4)\n</code></pre> <p>If both a and v are defined robot will try to move at those specified speeds. When a and v are defined robot can only use trapezoidal profiles and they are automatically selected you do not need to define func as \"trap\". Specified a and v are applied to LEADING joint, that is the joint that will need to travel the longest. Because of that a and v percenteges that will work for LEADING joint will not necesarry work for other joints. If they do not work control algorithm will select proper move profile indepentand on a and v values. values will then be selected by this rule needed and initial are not the same but path is really small use 1/3 acc, 1/3 cruise and 1/3 deac. Example:</p> <pre><code>MoveJoint(0,-90,180,0,0,180,v=50,a=50)\n</code></pre> <p>If only j1,j2,j3,j4,j5,j6 are given and no other variable joints algorithm       will use small conservative speed and acceleration. \"trap\" function will be used. Example:</p> <pre><code>MoveJoint(0,-90,180,0,0,180)\n</code></pre> <p>In case you define your last arguments as speed, the robot will only follow the speed curve of the generated trajectory. It will generate motion that is more silent and smooth but will miss its desired position.  Example: </p> <pre><code>MoveJoint(0,-90,180,0,0,180,speed)\n</code></pre> <p>Example commands and explanation:</p>"},{"location":"page4/#moveposexyzrxryrzv0a0t0funcspeed","title":"MovePose(x,y,z,Rx,Ry,Rz,v=0,a=0,t=0,func,speed)","text":"<p>Robot will move all its joints to the desired orientation tracking a specific velocity curve. Joints will stop at the same time at the desired positons. The path is linear in joint space, because of that actuator motion is easy to validate and predict but TRF/end-effector is hard to predict. Can track trapezoidal velocity profile or polynomial. User can set desired duration of the move or specific acceleration and velocity.  The move can be tracked based on speed curve alone or combination of commanded speed curve and position curve.</p> <ul> <li>x,y,z,Rx,Ry,Rz -&gt; desired robot pose. x,y,z are in [mm]; Rx,Ry,Rz are in [degrees] REQUIRED ELEMENT</li> <li>a -&gt; desired acceleration and deaceleration of leading joint [% from 0 - 100] OPTIONAL ELEMENT</li> <li>v -&gt; speed of leading joint (Joint that needs to travel the longest)[% from 0 - 100] OPTIONAL ELEMENT</li> <li>t -&gt; desired duration of the move [s] OPTIONAL ELEMENT</li> <li>func -&gt; can be \"poly\" or \"trap\" [no unit] OPTIONAL ELEMENT</li> <li>speed -&gt; can be speed or nothing [no unit] OPTIONAL ELEMENT</li> </ul> <p>Arguments need to be given in above defined order!</p> <p>Rules that apply to MoveJoint() are same for MovePose. Code is the same except that control algoritam will calculate joint angles using inverse kinemtics from needed robot pose. Because of that you might end up with robot joint configuration that is not same as one that you wanted.</p> <p>** slika di je robot u same pose but different joint angles.</p> <p>Example commands and explanation:</p>"},{"location":"page4/#speedjoint","title":"SpeedJoint()","text":""},{"location":"page4/#movecartxyzrxryrzt0funcspeed","title":"MoveCart(x,y,z,Rx,Ry,Rz,t=0,func,speed)","text":"<p>Robot will move all its joints to the desired orientation tracking a specific velocity curve. Joints will stop at the same time at the desired positons. The path is linear in tools / task    space, Actuator motion not necessarily smooth and harder to validate. Can track trapezoidal velocity profile or polynomial. With this mode robot cant pass singularities and is affected by them. Note that when robot gets close to singularity it will stop. Robot will try to exectute the trajectory even if it has singularity in it. User needs  User can set desired duration of the move with variable t. </p> <p>Arguments need to be given in above defined order!</p> <ul> <li>x,y,z,Rx,Ry,Rz -&gt; desired robot pose with respest to WRF. x,y,z are in [mm]; Rx,Ry,Rz are in [degrees] REQUIRED ELEMENT</li> <li>t -&gt; desired duration of the move [s] OPTIONAL ELEMENT</li> <li>func -&gt; can be \"poly\" or \"trap\" [no unit] OPTIONAL ELEMENT</li> <li>speed -&gt; can be speed or nothing [no unit] OPTIONAL ELEMENT</li> </ul> <p>Example commands and explanation:</p>"},{"location":"page4/#movecartreltrfxyzrxryrzt0funcspeed","title":"MoveCartRelTRF(x,y,z,Rx,Ry,Rz,t=0,func,speed)","text":"<p>Unlike MoveCart where pose is defined with respect to WRF in MoveCartRelTRF we are moving robot pose relative to current Tool reference frame. </p> <ul> <li>x,y,z,Rx,Ry,Rz -&gt; pose arguments relative to TRF. x,y,z are in [mm]; Rx,Ry,Rz are in [degrees] REQUIRED ELEMENT</li> <li>t -&gt; desired duration of the move [s] OPTIONAL ELEMENT</li> <li>func -&gt; can be \"poly\" or \"trap\" [no unit] OPTIONAL ELEMENT</li> <li>speed -&gt; can be speed or nothing [no unit] OPTIONAL ELEMENT</li> </ul> <p>When rotating around x, y and z using Rx ,Ry, Rz it is recommended to make 2 succesive commands. Example:</p> <pre><code>MoveCartRelTRF(0, 0, 0, 0, 45, 0) \nMoveCartRelTRF(0, 0, 0, 0, 0, 45)\n</code></pre> <p>Example commands and explanation:</p>"},{"location":"page4/#delay","title":"Delay()","text":"<p>Delays the script by specific time in seconds [s]. Note that smallest delay can be equal to INTERVAL_S variable (loop time of the robot arm, usually 10ms) Example: </p> <pre><code>Delay(1.5) // Adds time delay of 1.5s\n</code></pre>"},{"location":"page4/#end","title":"End()","text":"<p>Intidates that script will stop exectuing at this moment Example:</p> <pre><code>End()\n</code></pre>"},{"location":"page4/#begin","title":"Begin()","text":"<p>Indicates that script will begin. Example:</p> <pre><code>Begin()\n</code></pre>"},{"location":"page4/#loop","title":"Loop()","text":"<p>When script reaches this command it will start executing from the beginning. Example:</p> <pre><code>Loop()\n</code></pre>"},{"location":"page4/#output","title":"Output()","text":"<p>Sets one of the 2 outputs HIGH or LOW.  Example:</p> <pre><code>Output(1, HIGH) // sets output 1 of PAROL6 control board to HIGH state\nOutput(2, LOw) // sets output 2 of PAROL6 control board to LOW state\n</code></pre>"},{"location":"page4/#example-codes-with-explanation","title":"Example codes with explanation","text":""},{"location":"page5/","title":"Peripherals","text":"<p>PAROL6 control board has multiple ways to interact with outside world. Communication with high level code running on a PC is done with USB, but on top of that you can use other features like I/O or CAN to communicata.</p> <p> </p>"},{"location":"page5/#io-connections","title":"I/O connections","text":"<p>PAROL6 is equipped with 2 isolated inputs and 2 isolated outputs.</p>"},{"location":"page5/#isolated-power-supply","title":"Isolated power supply","text":"<p>It is standard to have isolated Inputs and Outputs to protect your device. To use isolated power supply follow the connections on image below. Connect minus of power supply  to any of GND_SEL pins and plus of power supply to any of HV_SEL pins.</p> <p>Note!</p> <p>Even tho Inputs and Outputs are now isolated from the robot, the ESTOP is still connected to the same power supply of the robot</p> <p> </p> <p>By using isolated power supply you are not limited to 24V. You can 5V or 12V depending on your aplications.</p>"},{"location":"page5/#not-isolated-power-supply","title":"Not isolated power supply","text":"<p>By following the connections as shown on image below all inputs and outputs will be connected to power supply of the robot.</p> <p> </p>"},{"location":"page5/#examples-of-input-connections","title":"Examples of input connections","text":"<p>Inputs can be limit switches, push buttons, Sensors... For limit switch connect one end of the switch to HV_SEL and another one to IN1 or IN2.</p>"},{"location":"page5/#examples-of-output-connections","title":"Examples of output connections","text":"<p>Outputs can be releys, lamps, low power actuators... For releys connect one end to GND_SEL and another to OUT1 or OUT2.</p>"},{"location":"page5/#can-bus","title":"CAN bus","text":"<p>Still under developement</p> <p>Can bus will allow you to connect external grippers and additional axes.  There are 2 CAN buses.</p>"},{"location":"page5/#pneumatics","title":"Pneumatics","text":"<p>Recommended pressure</p> <p>Recommended pressure for PAROL6 and generally in industry is 6-8 bar. All examples conducted with pneumatics you see in our videos are done with pressures in that range. Negative pressures are also possible but we are still experimenting with them.</p>"},{"location":"page5/#example-of-gripper-connection","title":"Example of gripper connection","text":"<p>The 2 tubes going into a gripper are tubes that exit the PAROL6 robotic arm at a forearm region. Tubes going from the pneumatic valve need to be connected to the pneumatic connections in the base of the robot. Orientation is imporatant. Switching the 2 tubes will make your gripper normally closed or normally open depending on the orientation.</p> <p> </p>"},{"location":"page5/#estop","title":"Estop","text":"<p>Connection is as follows:</p> <p> </p> <p>Estop needs to be connected for normal operation of the robot</p> <p>TIP</p> <p>If you dont have an ESTOP you can use any NO switch!</p> <p>TIP2</p> <p>On PAROL6 controller board there are connectors for 2 ESTOPS. They both share same GPIO on microcontroller. They both need to be NO contact. </p> <p>Estop needs to be NORMALLY CLOSED (NO) contact type. NC will not work. NO is beneficial in case your estop unplugs or gets its wires cut it will also register as a press of an estop, which is desirable behaviour.</p>"},{"location":"page6/","title":"Safety and handling","text":"<p>Warning</p> <p>Not following the procedures can cause damage to the robot and operator. Make sure you read them and FOLLOW THEM!</p> <p>PAROL6 needs special handling even tho it is lightweight desktop robot. Weighting only 5kg it still needs to be anhored to the surfaces. In case of power loss the robots joints will not hold themselfs and robot will start to fall down. That is the property of the relativly low reduction ratios in PAROL6. </p> <p>Addition of brakes</p> <p>Solution for that problem, like in industrial aplications is to use brakes. Addition of brakes is on TODO list for PAROL6.</p> <p> </p> <p>PAROL6 requires 3 connections for normal operation.</p> <ul> <li> <p>Power connection -&gt; Marked green on image</p> </li> <li> <p>USB connection -&gt; Marked blue on image</p> </li> <li> <p>ESTOP -&gt; Marked with yellow and pink squares</p> </li> </ul>"},{"location":"page6/#code-upload","title":"Code upload","text":"<p>When uploading code to the PAROL6 controller board TURN OFF the 24V power supply of the robot. When uploading code to PAROL6 controller board it receives 3v3 from stlink device. This keeps the robot constantly ON and blocks the shutdown of the robot with a powerbutton located on the base.  After the code is uploaded disconnect the stlink, turn on the robot with power button located on the base and then run the PAROL6 commander software.</p>"},{"location":"page6/#safe-shutdown","title":"Safe shutdown","text":"<p>Do not try to power off the robot when it is running!</p> <p>If robot start to behave unexpectedly USE ESTOP. If ESTOP is not functional power of the supply. Reaching for the power button should be the last option.</p> <p>Because lack of brakes sudden loss of power will result in robot falling down. That may cause damage to the robot or the operator. Robot is powered on and off by pressing a button marked red on the image. When powering the robot on even when USB connection is not available it will energise the the motors. It will produce 6 clicking sounds and that is normal behaviour.</p> <p>Powering off the robot is also done by pressing button marked in RED. Before you power off the robot GRAB IT BY THE FOREARM and then press the button. This will ensure that robot does not fall down.</p>"},{"location":"page6/#anchoring-the-robot","title":"Anchoring the robot","text":"<p>Robot that is not anchored WILL fall over!</p> <p>There are 2 ways of anchoring the robot:</p> <ul> <li>Using the 6 holes in the base of the robot to attach it to the surface</li> <li>Using clamps to attach it to the edge of the table or work surface</li> </ul>"},{"location":"page6/#pinching-points","title":"Pinching points","text":""},{"location":"page6/#transport","title":"Transport","text":"<p>When moving the robot it is best to move joints 2 and 3 to the limit switches. After that grab the robot by the base and you can carry it around.</p> <p>When packing the robot it is recommended to put some kind of sponge or styrofoam under J3 limit switch. After that you can tape around forearm and upper arm links.</p>"},{"location":"page6/#estop","title":"ESTOP","text":"<p>Estop needs to be connected for normal operation of the robot</p> <p>TIP</p> <p>If you dont have an ESTOP you can use any NO switch!</p> <p>TIP2</p> <p>On PAROL6 controller board there are connectors for 2 ESTOPS. They both share same GPIO on microcontroller. They both need to be NO contact. </p> <p>Estop needs to be NORMALLY CLOSED (NO) contact type. NC will not work. NO is beneficial in case your estop unplugs or gets its wires cut it will also register as a press of an estop, which is desirable behaviour.</p>"}]}